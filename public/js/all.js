// Generated by CoffeeScript 1.12.5
var TwitchBotStream;

TwitchBotStream = (function() {
  var get_url_command, get_url_config, get_url_event, get_url_follower, get_url_lang, get_url_log, get_url_message, get_url_viewer, put_url_config, set_url_command, set_url_data, set_url_event;

  function TwitchBotStream() {}

  get_url_config = "/get/data/config/";

  get_url_lang = "/get/data/lang/";

  get_url_command = "/get/data/command";

  get_url_event = "/get/data/event/";

  get_url_follower = "/get/data/follower/";

  get_url_viewer = "/get/data/viewer/";

  get_url_message = "/get/data/message/";

  get_url_log = "/get/data/log/";

  put_url_config = "/put/data/config/";

  set_url_data = "/set/data/config/";

  set_url_event = "/set/data/event/";

  set_url_command = "/set/data/command/";

  TwitchBotStream.prototype.init = function() {
    var COMMAND, CONFIG, EVENT, FOLLOWER, LANGUAGE, LOG, VIEWER;
    LANGUAGE = null;
    CONFIG = null;
    EVENT = null;
    COMMAND = null;
    FOLLOWER = null;
    VIEWER = null;
    LOG = null;
    if (!this.checkInstall()) {
      return document.location = "/installation/";
    }
  };

  TwitchBotStream.prototype.admin_panel_0 = function() {
    var that;
    that = this;
    if (that.checkBotStart()) {
      document.getElementById("lang_panel_bot_start").classList.add("active");
      document.getElementById("lang_panel_bot_stop").classList.remove("active");
    } else if (!that.checkBotStart()) {
      document.getElementById("lang_panel_bot_stop").classList.add("active");
      document.getElementById("lang_panel_bot_start").classList.remove("active");
    }
    try {
      setInterval((function(_this) {
        return function() {
          _this.LOG = that.requestAjax(get_url_log, "GET");
          return document.getElementById("LOGBOX").innerHTML = _this.LOG.replace(/\n/g, '<br />');
        };
      })(this), 1500);
    } catch (error) {}
    try {
      document.getElementById("lang_panel_bot_start").addEventListener("click", function() {
        that.requestAjax(set_url_data + "?config.bot.start=true", "GET");
        if (that.checkBotStart()) {
          document.getElementById("lang_panel_bot_start").classList.add("active");
          return document.getElementById("lang_panel_bot_stop").classList.remove("active");
        }
      });
    } catch (error) {}
    try {
      document.getElementById("lang_panel_bot_stop").addEventListener("click", function() {
        that.requestAjax(set_url_data + "?config.bot.start=false", "GET");
        that.checkBotStart();
        if (!that.checkBotStart()) {
          document.getElementById("lang_panel_bot_stop").classList.add("active");
          return document.getElementById("lang_panel_bot_start").classList.remove("active");
        }
      });
    } catch (error) {}
    try {
      this.CONFIG = JSON.parse(this.requestAjax(get_url_config, "GET"));
      document.getElementById("admin_0_input_1").value = "#" + this.CONFIG.BOT.color;
      return document.getElementById("lang_panel_bot_color_save").addEventListener("click", function() {
        that.requestAjax(put_url_config + ("?config.bot.color=" + (document.getElementById("admin_0_input_1").value.substring(1))), "GET");
        return document.location = "/#administration";
      });
    } catch (error) {}
  };

  TwitchBotStream.prototype.admin_panel_1 = function() {
    var that;
    that = this;
    try {
      this.FOLLOWER = JSON.parse(that.requestAjax(get_url_follower, "GET"));
      this.VIEWER = JSON.parse(that.requestAjax(get_url_viewer, "GET"));
      this.MESSAGE = JSON.parse(that.requestAjax(get_url_message, "GET"));
      document.getElementById("panel_stats_follower_total").innerHTML = this.FOLLOWER.INFO.follower;
      document.getElementById("panel_stats_viewer_total").innerHTML = this.VIEWER.INFO.viewer;
      document.getElementById("panel_stats_message_total").innerHTML = this.MESSAGE.INFO.total;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_stats_form_question_add").addEventListener("click", function() {
        return document.getElementById("panel_stats_table").innerHTML += "<tr>\n  <th>" + that.LANGUAGE.LANGUAGE.lang_panel_stats_table_question + "</th>\n  <td>" + (document.getElementById("panel_stats_input_1").value) + "</td>\n  <td><i class=\"fa fa-times\" aria-hidden=\"true\"></i></td>\n</tr>";
      });
    } catch (error) {}
    try {
      return document.getElementById("lang_panel_stats_form_reponse_add").addEventListener("click", function() {
        return document.getElementById("panel_stats_table").innerHTML += "<tr>\n  <th>" + that.LANGUAGE.LANGUAGE.lang_panel_stats_table_reponse + "</th>\n  <td>" + (document.getElementById("panel_stats_input_2").value) + "</td>\n  <td><i class=\"fa fa-times\" aria-hidden=\"true\"></i></td>\n</tr>";
      });
    } catch (error) {}
  };

  TwitchBotStream.prototype.admin_panel_2 = function() {
    var n, results, that;
    that = this;
    try {
      document.getElementById("lang_panel_command_add").addEventListener("click", function() {
        var group1, group2;
        if (document.getElementById("panel_command_action_join").checked) {
          group1 = "onJoin";
        } else if (document.getElementById("panel_command_action_leave").checked) {
          group1 = "onLeave";
        } else {
          group1 = "";
        }
        if (document.getElementById("panel_command_command_method_me").checked) {
          group2 = "Me";
        } else if (document.getElementById("panel_command_method_chat").checked) {
          group2 = "Chat";
        } else if (document.getElementById("panel_command_method_whisper").checked) {
          group2 = "Whisper";
        } else {
          group2 = "";
        }
        return that.requestAjax(set_url_event + ("?\ncommand.event.event=" + group1 + "&\ncommand.event.method=" + group2 + "&\ncommand.event.message=" + (document.getElementById("panel_command_action_message").value)), "GET");
      });
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_command_add").addEventListener("click", function() {
        var group3, user_moderat, user_stramer, user_user;
        if (document.getElementById("lang_panel_command_command_modo_check").checked) {
          user_moderat = true;
        }
        if (document.getElementById("lang_panel_command_command_user_check").checked) {
          user_user = true;
        }
        if (document.getElementById("lang_panel_command_command_owner_check").checked) {
          user_stramer = true;
        }
        if (document.getElementById("lang_panel_command_event_me_radio").checked) {
          group3 = "Me";
        } else if (document.getElementById("lang_panel_command_event_chat_radio").checked) {
          group3 = "Chat";
        } else if (document.getElementById("lang_panel_command_event_whisper_radio").checked) {
          group3 = "Whisper";
        } else {
          group3 = "";
        }
        return that.requestAjax(set_url_command + ("?\ncommand.command.command=" + (document.getElementById("panel_command_command_input_1").value) + "&\ncommand.command.method=" + group3 + "&\ncommand.command.perm.streamer=" + (user_stramer || false) + "&\ncommand.command.perm.moderato=" + (user_moderat || false) + "&\ncommand.command.perm.user=" + (user_user || false) + "&\ncommand.command.message=" + (document.getElementById("panel_command_command_input_2").value)), "GET");
      });
    } catch (error) {}
    try {
      this.COMMAND = JSON.parse(this.requestAjax(get_url_command, "GET"));
      n = 0;
      while (n < Object.keys(this.COMMAND).length) {
        console.log(this.COMMAND[Object.keys(this.COMMAND)[n]]);
        document.getElementById("panel_command_command_table").innerHTML += "<tr>\n  <td>" + this.COMMAND[Object.keys(this.COMMAND)[n]]['command'] + "</td>\n  <td>" + this.COMMAND[Object.keys(this.COMMAND)[n]]['method'] + "</td>\n  <td>" + this.COMMAND[Object.keys(this.COMMAND)[n]]['message'] + "</td>\n  <td>" + (this.COMMAND[Object.keys(this.COMMAND)[n]]['user_user'] ? "<i class=\"fa fa-check\" aria-hidden=\"true\"></i>" : "<i class=\"fa fa-times\" aria-hidden=\"true\"></i>") + "</td>\n  <td>" + (this.COMMAND[Object.keys(this.COMMAND)[n]]['user_moderat'] ? "<i class=\"fa fa-check\" aria-hidden=\"true\"></i>" : "<i class=\"fa fa-times\" aria-hidden=\"true\"></i>") + "</td>\n  <td>" + (this.COMMAND[Object.keys(this.COMMAND)[n]]['user_stramer'] ? "<i class=\"fa fa-check\" aria-hidden=\"true\"></i>" : "<i class=\"fa fa-times\" aria-hidden=\"true\"></i>") + "</td>\n  <td><i class=\"fa fa-trash\" aria-hidden=\"true\"></i> <i class=\"fa fa-check-circle-o\" aria-hidden=\"true\"></i></td>\n</tr>";
        n++;
      }
    } catch (error) {}
    try {
      this.EVENT = JSON.parse(this.requestAjax(get_url_event, "GET"));
      n = 0;
      results = [];
      while (n < Object.keys(this.EVENT).length) {
        console.log(this.EVENT[Object.keys(this.EVENT)[n]]);
        document.getElementById("panel_command_event_table").innerHTML += "<tr>\n  <td>" + this.EVENT[Object.keys(this.EVENT)[n]]['event'] + "</td>\n  <td>" + this.EVENT[Object.keys(this.EVENT)[n]]['method'] + "</td>\n  <td>" + this.EVENT[Object.keys(this.EVENT)[n]]['message'] + "</td>\n  <td><i class=\"fa fa-trash\" aria-hidden=\"true\"></i> <i class=\"fa fa-check-circle-o\" aria-hidden=\"true\"></i></td>\n</tr>";
        results.push(n++);
      }
      return results;
    } catch (error) {}
  };

  TwitchBotStream.prototype.administration = function() {
    var that;
    that = this;
    if (window.location.hash === "#administration") {
      document.getElementById("admin_MainPanel").innerHTML = that.requestAjax("/model/admin_0.html", "GET");
      that.languageInit();
      that.admin_panel_0();
      document.getElementById("nav_link_admin").classList.add("active");
      document.getElementById("nav_link_stats").classList.remove("active");
      document.getElementById("nav_link_command").classList.remove("active");
    } else if (window.location.hash === "#stats") {
      document.getElementById("admin_MainPanel").innerHTML = that.requestAjax("/model/admin_1.html", "GET");
      that.languageInit();
      that.admin_panel_1();
      document.getElementById("nav_link_admin").classList.remove("active");
      document.getElementById("nav_link_stats").classList.add("active");
      document.getElementById("nav_link_command").classList.remove("active");
    } else if (window.location.hash === "#command") {
      document.getElementById("admin_MainPanel").innerHTML = that.requestAjax("/model/admin_2.html", "GET");
      that.languageInit();
      that.admin_panel_2();
      document.getElementById("nav_link_admin").classList.remove("active");
      document.getElementById("nav_link_stats").classList.remove("active");
      document.getElementById("nav_link_command").classList.add("active");
    }
    return window.addEventListener("hashchange", function() {
      if (window.location.hash === "#administration") {
        document.getElementById("admin_MainPanel").innerHTML = that.requestAjax("/model/admin_0.html", "GET");
        that.languageInit();
        that.admin_panel_0();
        document.getElementById("nav_link_admin").classList.add("active");
        document.getElementById("nav_link_stats").classList.remove("active");
        return document.getElementById("nav_link_command").classList.remove("active");
      } else if (window.location.hash === "#command") {
        document.getElementById("admin_MainPanel").innerHTML = that.requestAjax("/model/admin_2.html", "GET");
        that.languageInit();
        that.admin_panel_2();
        document.getElementById("nav_link_admin").classList.remove("active");
        document.getElementById("nav_link_stats").classList.remove("active");
        return document.getElementById("nav_link_command").classList.add("active");
      } else if (window.location.hash === "#stats") {
        document.getElementById("admin_MainPanel").innerHTML = that.requestAjax("/model/admin_1.html", "GET");
        that.languageInit();
        that.admin_panel_1();
        document.getElementById("nav_link_admin").classList.remove("active");
        document.getElementById("nav_link_stats").classList.add("active");
        return document.getElementById("nav_link_command").classList.remove("active");
      }
    });
  };

  TwitchBotStream.prototype.installation = function() {
    var Parsed, that;
    Parsed = JSON.parse(this.requestAjax(get_url_config, "GET"));
    if (Parsed.OPTION.instalX === Parsed.OPTION.instalXmax) {
      return document.location = "/";
    } else if (Parsed.OPTION.instalX === "0") {
      document.getElementById("installation_instalX").innerHTML = Parsed.OPTION.instalX;
      document.getElementById("installation_instalXmax").innerHTML = Parsed.OPTION.instalXmax;
      document.getElementById("installation_content").innerHTML = this.requestAjax("/model/install_0.html", "GET");
      try {
        that = this;
        return document.getElementById("install_0_arrow").addEventListener("click", function() {
          that.requestAjax(put_url_config + "?config.option.instalx=1", "GET");
          return document.location = "/installation/";
        });
      } catch (error) {}
    } else if (Parsed.OPTION.instalX === "1") {
      document.getElementById("installation_instalX").innerHTML = Parsed.OPTION.instalX;
      document.getElementById("installation_instalXmax").innerHTML = Parsed.OPTION.instalXmax;
      document.getElementById("installation_content").innerHTML = this.requestAjax("/model/install_1.html", "GET");
      try {
        that = this;
        return document.getElementById("install_1_arrow").addEventListener("click", function() {
          that.requestAjax(put_url_config + ("?\nconfig.user.chanel=" + (document.getElementById("install_1_input").value) + "\n&config.option.instalx=2"));
          return document.location = "/installation/";
        });
      } catch (error) {}
    } else if (Parsed.OPTION.instalX === "2") {
      document.getElementById("installation_instalX").innerHTML = Parsed.OPTION.instalX;
      document.getElementById("installation_instalXmax").innerHTML = Parsed.OPTION.instalXmax;
      document.getElementById("installation_content").innerHTML = this.requestAjax("/model/install_2.html", "GET");
      try {
        that = this;
        return document.getElementById("install_2_arrow").addEventListener("click", function() {
          that.requestAjax(put_url_config + ("?\nconfig.user.username=" + (document.getElementById("install_2_input_1").value) + "\n&config.user.password=" + (document.getElementById("install_2_input_2").value) + "\n&config.option.instalx=3"));
          return document.location = "/installation/";
        });
      } catch (error) {}
    } else if (Parsed.OPTION.instalX === "3") {
      document.getElementById("installation_instalX").innerHTML = Parsed.OPTION.instalX;
      document.getElementById("installation_instalXmax").innerHTML = Parsed.OPTION.instalXmax;
      document.getElementById("installation_content").innerHTML = this.requestAjax("/model/install_3.html", "GET");
      try {
        that = this;
        return document.getElementById("install_3_arrow").addEventListener("click", function() {
          that.requestAjax(put_url_config + ("?\nconfig.bot.color=" + (document.getElementById("install_3_input_1").value) + "\n&config.option.instalx=4"));
          return document.location = "/installation/";
        });
      } catch (error) {}
    } else if (Parsed.OPTION.instalX === "4") {
      document.getElementById("installation_instalX").innerHTML = Parsed.OPTION.instalX;
      document.getElementById("installation_instalXmax").innerHTML = Parsed.OPTION.instalXmax;
      document.getElementById("installation_content").innerHTML = this.requestAjax("/model/install_4.html", "GET");
      try {
        that = this;
        return document.getElementById("install_4_input_1").addEventListener("click", function() {
          that.requestAjax(put_url_config + "?\nconfig.option.instalx=5");
          return document.location = "/";
        });
      } catch (error) {}
    }
  };

  TwitchBotStream.prototype.languageInit = function() {
    this.LANGUAGE = JSON.parse(this.requestAjax(get_url_lang, "GET"));
    this.CONFIG = JSON.parse(this.requestAjax(get_url_config, "GET"));
    try {
      document.getElementById("lang_install_next").innerHTML = this.LANGUAGE.LANGUAGE.lang_install_next;
    } catch (error) {}
    try {
      document.getElementById("lang_install_install").innerHTML = this.LANGUAGE.LANGUAGE.lang_install_install;
    } catch (error) {}
    try {
      document.getElementById("lang_install_installing").innerHTML = this.LANGUAGE.LANGUAGE.lang_install_installing;
    } catch (error) {}
    try {
      document.getElementById("lang_install_presentation").innerHTML = this.LANGUAGE.LANGUAGE.lang_install_presentation;
    } catch (error) {}
    try {
      document.getElementById("lang_install_bot_game").innerHTML = this.LANGUAGE.LANGUAGE.lang_install_bot_game;
    } catch (error) {}
    try {
      document.getElementById("lang_install_bot_spam").innerHTML = this.LANGUAGE.LANGUAGE.lang_install_bot_spam;
    } catch (error) {}
    try {
      document.getElementById("lang_install_bot_mods").innerHTML = this.LANGUAGE.LANGUAGE.lang_install_bot_mods;
    } catch (error) {}
    try {
      document.getElementById("lang_install_bot_blacklist").innerHTML = this.LANGUAGE.LANGUAGE.lang_install_bot_blacklist;
    } catch (error) {}
    try {
      document.getElementById("lang_install_select_chanel").innerHTML = this.LANGUAGE.LANGUAGE.lang_install_select_chanel;
    } catch (error) {}
    try {
      document.getElementById("lang_install_select_user").innerHTML = this.LANGUAGE.LANGUAGE.lang_install_select_user;
    } catch (error) {}
    try {
      document.getElementById("lang_install_user").innerHTML = this.LANGUAGE.LANGUAGE.lang_install_user;
    } catch (error) {}
    try {
      document.getElementById("lang_install_password").innerHTML = this.LANGUAGE.LANGUAGE.lang_install_password;
    } catch (error) {}
    try {
      document.getElementById("lang_install_bot_edit").innerHTML = this.LANGUAGE.LANGUAGE.lang_install_bot_edit;
    } catch (error) {}
    try {
      document.getElementById("lang_install_bot_color").innerHTML = this.LANGUAGE.LANGUAGE.lang_install_bot_color;
    } catch (error) {}
    try {
      document.getElementById("lang_install_success").innerHTML = this.LANGUAGE.LANGUAGE.lang_install_success;
    } catch (error) {}
    try {
      document.getElementById("lang_install_administration").innerHTML = this.LANGUAGE.LANGUAGE.lang_install_administration;
    } catch (error) {}
    try {
      document.getElementById("lang_admin_administration").innerHTML = this.LANGUAGE.LANGUAGE.lang_admin_administration;
    } catch (error) {}
    try {
      document.getElementById("lang_nav_statistic").innerHTML = this.LANGUAGE.LANGUAGE.lang_nav_statistic;
    } catch (error) {}
    try {
      document.getElementById("lang_nav_command").innerHTML = this.LANGUAGE.LANGUAGE.lang_nav_command;
    } catch (error) {}
    try {
      document.getElementById("lang_nav_title").innerHTML = this.LANGUAGE.LANGUAGE.lang_nav_title;
    } catch (error) {}
    try {
      document.getElementById("lang_nav_admin").innerHTML = this.LANGUAGE.LANGUAGE.lang_nav_admin;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_admin").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_admin;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_bot_start").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_bot_start;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_bot_stop").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_bot_stop;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_bot_color").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_bot_color;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_bot_color_hex").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_bot_color_hex;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_bot_color_save").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_bot_color_save;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_event").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_event;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_method_me").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_method_me;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_method_chat").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_method_chat;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_method_whisper").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_method_whisper;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_action_join").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_action_join;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_action_leave").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_action_leave;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_command").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_command;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_add").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_add;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_command_add").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_command_add;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_event_me").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_event_me;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_event_chat").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_event_chat;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_event_whisper").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_event_whisper;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_command_command").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_command_command;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_command_result").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_command_result;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_command_option").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_command_option;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_event_event").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_event_event;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_event_method").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_event_method;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_event_result").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_event_result;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_event_option").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_event_option;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_command_owner").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_command_owner;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_command_user").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_command_user;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_command_command_modo").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_command_command_modo;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_stats").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_stats;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_stats_follower").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_stats_follower;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_stats_viewer").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_stats_viewer;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_stats_message").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_stats_message;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_stats_sondage").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_stats_sondage;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_stats_form_question").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_stats_form_question;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_stats_form_question_add").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_stats_form_question_add;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_stats_form_reponse").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_stats_form_reponse;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_stats_form_reponse_add").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_stats_form_reponse_add;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_stats_table_question").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_stats_table_question;
    } catch (error) {}
    try {
      document.getElementById("lang_panel_stats_table_reponse").innerHTML = this.LANGUAGE.LANGUAGE.lang_panel_stats_table_reponse;
    } catch (error) {}
    try {
      return document.getElementById("config_bot_name").innerHTML = this.CONFIG.USER.username;
    } catch (error) {}
  };

  TwitchBotStream.prototype.checkBotStart = function() {
    var Parsed;
    Parsed = JSON.parse(this.requestAjax(get_url_config, "GET"));
    if (Parsed.BOT.start) {
      return true;
    } else {
      return false;
    }
  };

  TwitchBotStream.prototype.checkInstall = function() {
    var Parsed;
    Parsed = JSON.parse(this.requestAjax(get_url_config, "GET"));
    if (Parsed.OPTION.instalX === Parsed.OPTION.instalXmax) {
      return true;
    } else {
      return false;
    }
  };

  TwitchBotStream.prototype.requestAjax = function(fun_url, fun_method) {
    var xmlHTTP;
    xmlHTTP = new XMLHttpRequest();
    xmlHTTP.open(fun_method || "GET", fun_url, false);
    xmlHTTP.send(null);
    return xmlHTTP.responseText;
  };

  return TwitchBotStream;

})();

TwitchBotStream = new TwitchBotStream();
